{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/EtherWallet.sol"
  },
  "ast": {
    "absolutePath": "contracts/EtherWallet.sol",
    "exportedSymbols": {
      "EtherWallet": [
        119
      ]
    },
    "id": 120,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "EtherWallet",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 119,
        "linearizedBaseContracts": [
          119
        ],
        "name": "EtherWallet",
        "nameLocation": "204:11:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 3,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "297:5:0",
            "nodeType": "VariableDeclaration",
            "scope": 119,
            "src": "281:21:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 2,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "281:15:0",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "aa8c217c",
            "id": 5,
            "mutability": "mutable",
            "name": "amount",
            "nameLocation": "415:6:0",
            "nodeType": "VariableDeclaration",
            "scope": 119,
            "src": "403:18:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 4,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "403:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 7,
            "mutability": "mutable",
            "name": "locked",
            "nameLocation": "487:6:0",
            "nodeType": "VariableDeclaration",
            "scope": 119,
            "src": "482:11:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 6,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "482:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 11,
            "mutability": "mutable",
            "name": "donors",
            "nameLocation": "668:6:0",
            "nodeType": "VariableDeclaration",
            "scope": 119,
            "src": "643:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 10,
              "keyType": {
                "id": 8,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "651:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "643:24:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 9,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "662:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 22,
              "nodeType": "Block",
              "src": "822:44:0",
              "statements": [
                {
                  "expression": {
                    "id": 20,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 14,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3,
                      "src": "832:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 17,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "848:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 18,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "848:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 16,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "840:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_payable_$",
                          "typeString": "type(address payable)"
                        },
                        "typeName": {
                          "id": 15,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "840:8:0",
                          "stateMutability": "payable",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 19,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "840:19:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "832:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 21,
                  "nodeType": "ExpressionStatement",
                  "src": "832:27:0"
                }
              ]
            },
            "id": 23,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "815:2:0"
            },
            "returnParameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "822:0:0"
            },
            "scope": 119,
            "src": "804:62:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 35,
              "nodeType": "Block",
              "src": "1070:98:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 28,
                          "name": "withdrawer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 25,
                          "src": "1088:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 29,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3,
                          "src": "1102:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "1088:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c7920746865206f776e657220697320616c6c6f77656420746f2077697468647261772e",
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1109:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f1083e65f3679d2a02d9e044ea410a29b13ffbbe6c0075b8494486d32f9f64c4",
                          "typeString": "literal_string \"Only the owner is allowed to withdraw.\""
                        },
                        "value": "Only the owner is allowed to withdraw."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f1083e65f3679d2a02d9e044ea410a29b13ffbbe6c0075b8494486d32f9f64c4",
                          "typeString": "literal_string \"Only the owner is allowed to withdraw.\""
                        }
                      ],
                      "id": 27,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1080:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 32,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1080:70:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 33,
                  "nodeType": "ExpressionStatement",
                  "src": "1080:70:0"
                },
                {
                  "id": 34,
                  "nodeType": "PlaceholderStatement",
                  "src": "1160:1:0"
                }
              ]
            },
            "id": 36,
            "name": "OnlyOwnerCanWithdraw",
            "nameLocation": "1025:20:0",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 26,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25,
                  "mutability": "mutable",
                  "name": "withdrawer",
                  "nameLocation": "1054:10:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 36,
                  "src": "1046:18:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 24,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1046:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1045:20:0"
            },
            "src": "1016:152:0",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 53,
              "nodeType": "Block",
              "src": "1202:123:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 40,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "1220:7:0",
                        "subExpression": {
                          "id": 39,
                          "name": "locked",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7,
                          "src": "1221:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f752063616e6e6f74207265646f207468697320616374696f6e2e",
                        "id": 41,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1229:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_89b5f5bd8fd596d1caa2b2c5771ee69cfe5cecb951856371f33e719956d8cd42",
                          "typeString": "literal_string \"You cannot redo this action.\""
                        },
                        "value": "You cannot redo this action."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_89b5f5bd8fd596d1caa2b2c5771ee69cfe5cecb951856371f33e719956d8cd42",
                          "typeString": "literal_string \"You cannot redo this action.\""
                        }
                      ],
                      "id": 38,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1212:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 42,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1212:48:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 43,
                  "nodeType": "ExpressionStatement",
                  "src": "1212:48:0"
                },
                {
                  "expression": {
                    "id": 46,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 44,
                      "name": "locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "1270:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 45,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1279:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1270:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 47,
                  "nodeType": "ExpressionStatement",
                  "src": "1270:13:0"
                },
                {
                  "id": 48,
                  "nodeType": "PlaceholderStatement",
                  "src": "1293:1:0"
                },
                {
                  "expression": {
                    "id": 51,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 49,
                      "name": "locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "1304:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "66616c7365",
                      "id": 50,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1313:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "1304:14:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 52,
                  "nodeType": "ExpressionStatement",
                  "src": "1304:14:0"
                }
              ]
            },
            "id": 54,
            "name": "NoReentrance",
            "nameLocation": "1183:12:0",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 37,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1195:2:0"
            },
            "src": "1174:151:0",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 70,
              "nodeType": "Block",
              "src": "1425:77:0",
              "statements": [
                {
                  "expression": {
                    "id": 60,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 57,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5,
                      "src": "1435:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "expression": {
                        "id": 58,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "1445:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 59,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "1445:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1435:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 61,
                  "nodeType": "ExpressionStatement",
                  "src": "1435:19:0"
                },
                {
                  "expression": {
                    "id": 68,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 62,
                        "name": "donors",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11,
                        "src": "1464:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 65,
                      "indexExpression": {
                        "expression": {
                          "id": 63,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1471:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 64,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1471:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1464:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "expression": {
                        "id": 66,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "1486:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 67,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "1486:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1464:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 69,
                  "nodeType": "ExpressionStatement",
                  "src": "1464:31:0"
                }
              ]
            },
            "functionSelector": "ed21248c",
            "id": 71,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "Deposit",
            "nameLocation": "1396:7:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 55,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1403:2:0"
            },
            "returnParameters": {
              "id": 56,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1425:0:0"
            },
            "scope": 119,
            "src": "1387:115:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 117,
              "nodeType": "Block",
              "src": "1620:359:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 87,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 83,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "1686:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_EtherWallet_$119",
                                  "typeString": "contract EtherWallet"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_EtherWallet_$119",
                                  "typeString": "contract EtherWallet"
                                }
                              ],
                              "id": 82,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1678:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 81,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1678:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 84,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1678:13:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 85,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "src": "1678:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 86,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1702:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1678:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f752068617665206e6f7468696e6720796574206f6e207468697320636f6e74726163742e",
                        "id": 88,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1705:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_826858af68897636c82405d23340c81a2f131bdb3a7e26bc95cddcaa5f120801",
                          "typeString": "literal_string \"You have nothing yet on this contract.\""
                        },
                        "value": "You have nothing yet on this contract."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_826858af68897636c82405d23340c81a2f131bdb3a7e26bc95cddcaa5f120801",
                          "typeString": "literal_string \"You have nothing yet on this contract.\""
                        }
                      ],
                      "id": 80,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1670:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 89,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1670:76:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 90,
                  "nodeType": "ExpressionStatement",
                  "src": "1670:76:0"
                },
                {
                  "assignments": [
                    92,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 92,
                      "mutability": "mutable",
                      "name": "sent",
                      "nameLocation": "1762:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 117,
                      "src": "1757:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 91,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1757:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 107,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 105,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1827:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 95,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "1780:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 96,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1780:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 94,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1772:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_payable_$",
                              "typeString": "type(address payable)"
                            },
                            "typeName": {
                              "id": 93,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1772:8:0",
                              "stateMutability": "payable",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 97,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1772:19:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "id": 98,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "1772:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 104,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "id": 101,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "1812:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_EtherWallet_$119",
                                  "typeString": "contract EtherWallet"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_EtherWallet_$119",
                                  "typeString": "contract EtherWallet"
                                }
                              ],
                              "id": 100,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1804:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 99,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1804:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 102,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1804:13:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "src": "1804:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "1772:54:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1772:58:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1756:74:0"
                },
                {
                  "expression": {
                    "id": 110,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 108,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5,
                      "src": "1840:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "30",
                      "id": 109,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1849:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1840:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 111,
                  "nodeType": "ExpressionStatement",
                  "src": "1840:10:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 113,
                        "name": "sent",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 92,
                        "src": "1941:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546865206d6f6e6579207761736e27742073656e742e",
                        "id": 114,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1947:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_40fcec38e71d60aaeb1d44a9d57ee0e73a4d2e4ebda5ea8d11429ab92108737b",
                          "typeString": "literal_string \"The money wasn't sent.\""
                        },
                        "value": "The money wasn't sent."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_40fcec38e71d60aaeb1d44a9d57ee0e73a4d2e4ebda5ea8d11429ab92108737b",
                          "typeString": "literal_string \"The money wasn't sent.\""
                        }
                      ],
                      "id": 112,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1933:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 115,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1933:39:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 116,
                  "nodeType": "ExpressionStatement",
                  "src": "1933:39:0"
                }
              ]
            },
            "functionSelector": "57ea89b6",
            "id": 118,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "expression": {
                      "id": 74,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "1591:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 75,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "1591:10:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 76,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 73,
                  "name": "OnlyOwnerCanWithdraw",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 36,
                  "src": "1570:20:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "1570:32:0"
              },
              {
                "id": 78,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 77,
                  "name": "NoReentrance",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 54,
                  "src": "1603:12:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "1603:12:0"
              }
            ],
            "name": "Withdraw",
            "nameLocation": "1544:8:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 72,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1552:2:0"
            },
            "returnParameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1620:0:0"
            },
            "scope": 119,
            "src": "1535:444:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 120,
        "src": "195:1786:0",
        "usedErrors": []
      }
    ],
    "src": "33:1948:0"
  },
  "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b031916331790556102dc806100326000396000f3fe6080604052600436106100345760003560e01c806357ea89b614610039578063aa8c217c14610043578063ed21248c1461006b575b600080fd5b610041610073565b005b34801561004f57600080fd5b5061005960015481565b60405190815260200160405180910390f35b610041610243565b60005433906001600160a01b031681146100e35760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920746865206f776e657220697320616c6c6f77656420746f2077697460448201526534323930bb9760d11b60648201526084015b60405180910390fd5b60025460ff16156101365760405162461bcd60e51b815260206004820152601c60248201527f596f752063616e6e6f74207265646f207468697320616374696f6e2e0000000060448201526064016100da565b6002805460ff191660011790554761019f5760405162461bcd60e51b815260206004820152602660248201527f596f752068617665206e6f7468696e6720796574206f6e207468697320636f6e6044820152653a3930b1ba1760d11b60648201526084016100da565b604051600090339047908381818185875af1925050503d80600081146101e1576040519150601f19603f3d011682016040523d82523d6000602084013e6101e6565b606091505b505060006001559050806102355760405162461bcd60e51b81526020600482015260166024820152752a34329036b7b732bc903bb0b9b713ba1039b2b73a1760511b60448201526064016100da565b50506002805460ff19169055565b34600160008282546102559190610280565b90915550503360009081526003602052604081208054349290610279908490610280565b9091555050565b600082198211156102a157634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220512c6a704f14062384bc215df067f7a34b49699946f0a7551fc0deac61e5024b64736f6c634300080c0033",
  "bytecodeSha1": "c9893531b906458cbb0ed9d894ee00842d7db0f8",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "EtherWallet",
  "coverageMap": {
    "branches": {
      "0": {
        "EtherWallet.Withdraw": {
          "5": [
            1088,
            1107,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "EtherWallet.Deposit": {
          "3": [
            1435,
            1454
          ],
          "4": [
            1464,
            1495
          ]
        },
        "EtherWallet.Withdraw": {
          "0": [
            1670,
            1746
          ],
          "1": [
            1840,
            1850
          ],
          "2": [
            1933,
            1972
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "6080604052600436106100345760003560e01c806357ea89b614610039578063aa8c217c14610043578063ed21248c1461006b575b600080fd5b610041610073565b005b34801561004f57600080fd5b5061005960015481565b60405190815260200160405180910390f35b610041610243565b60005433906001600160a01b031681146100e35760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920746865206f776e657220697320616c6c6f77656420746f2077697460448201526534323930bb9760d11b60648201526084015b60405180910390fd5b60025460ff16156101365760405162461bcd60e51b815260206004820152601c60248201527f596f752063616e6e6f74207265646f207468697320616374696f6e2e0000000060448201526064016100da565b6002805460ff191660011790554761019f5760405162461bcd60e51b815260206004820152602660248201527f596f752068617665206e6f7468696e6720796574206f6e207468697320636f6e6044820152653a3930b1ba1760d11b60648201526084016100da565b604051600090339047908381818185875af1925050503d80600081146101e1576040519150601f19603f3d011682016040523d82523d6000602084013e6101e6565b606091505b505060006001559050806102355760405162461bcd60e51b81526020600482015260166024820152752a34329036b7b732bc903bb0b9b713ba1039b2b73a1760511b60448201526064016100da565b50506002805460ff19169055565b34600160008282546102559190610280565b90915550503360009081526003602052604081208054349290610279908490610280565b9091555050565b600082198211156102a157634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220512c6a704f14062384bc215df067f7a34b49699946f0a7551fc0deac61e5024b64736f6c634300080c0033",
  "deployedSourceMap": "195:1786:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1535:444;;;:::i;:::-;;403:18;;;;;;;;;;;;;;;;;;;160:25:1;;;148:2;133:18;403::0;;;;;;;1387:115;;;:::i;1535:444::-;1102:5;;1591:10;;-1:-1:-1;;;;;1102:5:0;1088:19;;1080:70;;;;-1:-1:-1;;;1080:70:0;;398:2:1;1080:70:0;;;380:21:1;437:2;417:18;;;410:30;476:34;456:18;;;449:62;-1:-1:-1;;;527:18:1;;;520:36;573:19;;1080:70:0;;;;;;;;;1221:6:::1;::::0;::::1;;1220:7;1212:48;;;::::0;-1:-1:-1;;;1212:48:0;;805:2:1;1212:48:0::1;::::0;::::1;787:21:1::0;844:2;824:18;;;817:30;883;863:18;;;856:58;931:18;;1212:48:0::1;603:352:1::0;1212:48:0::1;1270:6;:13:::0;;-1:-1:-1;;1270:13:0::1;1279:4;1270:13;::::0;;1678:21:::2;1670:76;;;::::0;-1:-1:-1;;;1670:76:0;;1162:2:1;1670:76:0::2;::::0;::::2;1144:21:1::0;1201:2;1181:18;;;1174:30;1240:34;1220:18;;;1213:62;-1:-1:-1;;;1291:18:1;;;1284:36;1337:19;;1670:76:0::2;960:402:1::0;1670:76:0::2;1772:58;::::0;1757:9:::2;::::0;1780:10:::2;::::0;1804:21:::2;::::0;1757:9;1772:58;1757:9;1772:58;1804:21;1780:10;1772:58:::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;1849:1:0::2;1840:6;:10:::0;1756:74;-1:-1:-1;1756:74:0;1933:39:::2;;;::::0;-1:-1:-1;;;1933:39:0;;1779:2:1;1933:39:0::2;::::0;::::2;1761:21:1::0;1818:2;1798:18;;;1791:30;-1:-1:-1;;;1837:18:1;;;1830:52;1899:18;;1933:39:0::2;1577:346:1::0;1933:39:0::2;-1:-1:-1::0;;1304:6:0::1;:14:::0;;-1:-1:-1;;1304:14:0::1;::::0;;1535:444::o;1387:115::-;1445:9;1435:6;;:19;;;;;;;:::i;:::-;;;;-1:-1:-1;;1471:10:0;1464:18;;;;:6;:18;;;;;:31;;1486:9;;1464:18;:31;;1486:9;;1464:31;:::i;:::-;;;;-1:-1:-1;;1387:115:0:o;1928:225:1:-;1968:3;1999:1;1995:6;1992:1;1989:13;1986:136;;;2044:10;2039:3;2035:20;2032:1;2025:31;2079:4;2076:1;2069:15;2107:4;2104:1;2097:15;1986:136;-1:-1:-1;2138:9:1;;1928:225::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    195,
    1981
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x34 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x57EA89B6 EQ PUSH2 0x39 JUMPI DUP1 PUSH4 0xAA8C217C EQ PUSH2 0x43 JUMPI DUP1 PUSH4 0xED21248C EQ PUSH2 0x6B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x41 PUSH2 0x73 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x59 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x41 PUSH2 0x243 JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0xE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C7920746865206F776E657220697320616C6C6F77656420746F20776974 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x34323930BB97 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x136 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752063616E6E6F74207265646F207468697320616374696F6E2E00000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xDA JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE SELFBALANCE PUSH2 0x19F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F752068617665206E6F7468696E6720796574206F6E207468697320636F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x3A3930B1BA17 PUSH1 0xD1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xDA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 SELFBALANCE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x0 PUSH1 0x1 SSTORE SWAP1 POP DUP1 PUSH2 0x235 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x2A34329036B7B732BC903BB0B9B713BA1039B2B73A17 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xDA JUMP JUMPDEST POP POP PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST CALLVALUE PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x280 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH2 0x279 SWAP1 DUP5 SWAP1 PUSH2 0x280 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x2A1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD 0x2C PUSH11 0x704F14062384BC215DF067 0xF7 LOG3 0x4B 0x49 PUSH10 0x9946F0A7551FC0DEAC61 0xE5 MUL 0x4B PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        195,
        1981
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "LT",
      "path": "0"
    },
    "9": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x34"
    },
    "12": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "13": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "SHR",
      "path": "0"
    },
    "19": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "DUP1",
      "path": "0"
    },
    "20": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x57EA89B6"
    },
    "25": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "EQ",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x39"
    },
    "29": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "30": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "DUP1",
      "path": "0"
    },
    "31": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xAA8C217C"
    },
    "36": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "EQ",
      "path": "0"
    },
    "37": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x43"
    },
    "40": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "41": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "DUP1",
      "path": "0"
    },
    "42": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xED21248C"
    },
    "47": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "EQ",
      "path": "0"
    },
    "48": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x6B"
    },
    "51": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "52": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "53": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "55": {
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "DUP1",
      "path": "0"
    },
    "56": {
      "first_revert": true,
      "fn": null,
      "offset": [
        195,
        1981
      ],
      "op": "REVERT",
      "path": "0"
    },
    "57": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1535,
        1979
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "58": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1535,
        1979
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41"
    },
    "61": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1535,
        1979
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x73"
    },
    "64": {
      "fn": "EtherWallet.Withdraw",
      "jump": "i",
      "offset": [
        1535,
        1979
      ],
      "op": "JUMP",
      "path": "0"
    },
    "65": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1535,
        1979
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "66": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1535,
        1979
      ],
      "op": "STOP",
      "path": "0"
    },
    "67": {
      "offset": [
        403,
        421
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "68": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "69": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "DUP1",
      "path": "0"
    },
    "70": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "71": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4F"
    },
    "74": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "75": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "77": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "DUP1",
      "path": "0"
    },
    "78": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "REVERT",
      "path": "0"
    },
    "79": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "80": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "POP",
      "path": "0"
    },
    "81": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x59"
    },
    "84": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "86": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "87": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "DUP2",
      "path": "0"
    },
    "88": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "JUMP",
      "path": "0"
    },
    "89": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "90": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "92": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "93": {
      "op": "SWAP1"
    },
    "94": {
      "op": "DUP2"
    },
    "95": {
      "op": "MSTORE"
    },
    "96": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "98": {
      "op": "ADD"
    },
    "99": {
      "offset": [
        403,
        421
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "101": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "102": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "DUP1",
      "path": "0"
    },
    "103": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "104": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "SUB",
      "path": "0"
    },
    "105": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "106": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        403,
        421
      ],
      "op": "RETURN",
      "path": "0"
    },
    "107": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1387,
        1502
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "108": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1387,
        1502
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x41"
    },
    "111": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1387,
        1502
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x243"
    },
    "114": {
      "fn": "EtherWallet.Deposit",
      "jump": "i",
      "offset": [
        1387,
        1502
      ],
      "op": "JUMP",
      "path": "0"
    },
    "115": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1535,
        1979
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "116": {
      "offset": [
        1102,
        1107
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "118": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1102,
        1107
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "119": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1591,
        1601
      ],
      "op": "CALLER",
      "path": "0"
    },
    "120": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1591,
        1601
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "121": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "123": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "125": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "127": {
      "op": "SHL"
    },
    "128": {
      "op": "SUB"
    },
    "129": {
      "offset": [
        1102,
        1107
      ],
      "op": "AND",
      "path": "0"
    },
    "130": {
      "offset": [
        1088,
        1107
      ],
      "op": "DUP2",
      "path": "0"
    },
    "131": {
      "branch": 5,
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1088,
        1107
      ],
      "op": "EQ",
      "path": "0"
    },
    "132": {
      "offset": [
        1080,
        1150
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE3"
    },
    "135": {
      "branch": 5,
      "offset": [
        1080,
        1150
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "136": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "138": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "139": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "143": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "145": {
      "op": "SHL"
    },
    "146": {
      "offset": [
        1080,
        1150
      ],
      "op": "DUP2",
      "path": "0"
    },
    "147": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "148": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "150": {
      "offset": [
        1080,
        1150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "152": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "DUP3",
      "path": "0"
    },
    "153": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "ADD",
      "path": "0"
    },
    "154": {
      "op": "MSTORE"
    },
    "155": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "157": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "159": {
      "op": "DUP3"
    },
    "160": {
      "op": "ADD"
    },
    "161": {
      "op": "MSTORE"
    },
    "162": {
      "op": "PUSH32",
      "value": "0x4F6E6C7920746865206F776E657220697320616C6C6F77656420746F20776974"
    },
    "195": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "197": {
      "op": "DUP3"
    },
    "198": {
      "op": "ADD"
    },
    "199": {
      "op": "MSTORE"
    },
    "200": {
      "op": "PUSH6",
      "value": "0x34323930BB97"
    },
    "207": {
      "op": "PUSH1",
      "value": "0xD1"
    },
    "209": {
      "op": "SHL"
    },
    "210": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "212": {
      "op": "DUP3"
    },
    "213": {
      "op": "ADD"
    },
    "214": {
      "op": "MSTORE"
    },
    "215": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "217": {
      "op": "ADD"
    },
    "218": {
      "offset": [
        1080,
        1150
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "219": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "221": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "222": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "DUP1",
      "path": "0"
    },
    "223": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "224": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "SUB",
      "path": "0"
    },
    "225": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "226": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "227": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1080,
        1150
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "228": {
      "offset": [
        1221,
        1227
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "230": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1221,
        1227
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "231": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1221,
        1227
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "233": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1221,
        1227
      ],
      "op": "AND",
      "path": "0"
    },
    "234": {
      "offset": [
        1220,
        1227
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "235": {
      "offset": [
        1212,
        1260
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x136"
    },
    "238": {
      "offset": [
        1212,
        1260
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "239": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1212,
        1260
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "241": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1212,
        1260
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "242": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "246": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "248": {
      "op": "SHL"
    },
    "249": {
      "offset": [
        1212,
        1260
      ],
      "op": "DUP2",
      "path": "0"
    },
    "250": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1212,
        1260
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "251": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "253": {
      "offset": [
        1212,
        1260
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "255": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1212,
        1260
      ],
      "op": "DUP3",
      "path": "0"
    },
    "256": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1212,
        1260
      ],
      "op": "ADD",
      "path": "0"
    },
    "257": {
      "op": "MSTORE"
    },
    "258": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "260": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "262": {
      "op": "DUP3"
    },
    "263": {
      "op": "ADD"
    },
    "264": {
      "op": "MSTORE"
    },
    "265": {
      "op": "PUSH32",
      "value": "0x596F752063616E6E6F74207265646F207468697320616374696F6E2E00000000"
    },
    "298": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "300": {
      "op": "DUP3"
    },
    "301": {
      "op": "ADD"
    },
    "302": {
      "op": "MSTORE"
    },
    "303": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "305": {
      "op": "ADD"
    },
    "306": {
      "offset": [
        1212,
        1260
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDA"
    },
    "309": {
      "op": "JUMP"
    },
    "310": {
      "offset": [
        1212,
        1260
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "311": {
      "offset": [
        1270,
        1276
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "313": {
      "offset": [
        1270,
        1283
      ],
      "op": "DUP1",
      "path": "0"
    },
    "314": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1270,
        1283
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "315": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "317": {
      "op": "NOT"
    },
    "318": {
      "offset": [
        1270,
        1283
      ],
      "op": "AND",
      "path": "0"
    },
    "319": {
      "offset": [
        1279,
        1283
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "321": {
      "offset": [
        1270,
        1283
      ],
      "op": "OR",
      "path": "0"
    },
    "322": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1270,
        1283
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "323": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1270,
        1283
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "324": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1678,
        1699
      ],
      "op": "SELFBALANCE",
      "path": "0",
      "statement": 0
    },
    "325": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1670,
        1746
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19F"
    },
    "328": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1670,
        1746
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "329": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1670,
        1746
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "331": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1670,
        1746
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "332": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "336": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "338": {
      "op": "SHL"
    },
    "339": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1670,
        1746
      ],
      "op": "DUP2",
      "path": "0"
    },
    "340": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1670,
        1746
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "341": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "343": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1670,
        1746
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "345": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1670,
        1746
      ],
      "op": "DUP3",
      "path": "0"
    },
    "346": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1670,
        1746
      ],
      "op": "ADD",
      "path": "0"
    },
    "347": {
      "op": "MSTORE"
    },
    "348": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "350": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "352": {
      "op": "DUP3"
    },
    "353": {
      "op": "ADD"
    },
    "354": {
      "op": "MSTORE"
    },
    "355": {
      "op": "PUSH32",
      "value": "0x596F752068617665206E6F7468696E6720796574206F6E207468697320636F6E"
    },
    "388": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "390": {
      "op": "DUP3"
    },
    "391": {
      "op": "ADD"
    },
    "392": {
      "op": "MSTORE"
    },
    "393": {
      "op": "PUSH6",
      "value": "0x3A3930B1BA17"
    },
    "400": {
      "op": "PUSH1",
      "value": "0xD1"
    },
    "402": {
      "op": "SHL"
    },
    "403": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "405": {
      "op": "DUP3"
    },
    "406": {
      "op": "ADD"
    },
    "407": {
      "op": "MSTORE"
    },
    "408": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "410": {
      "op": "ADD"
    },
    "411": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1670,
        1746
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDA"
    },
    "414": {
      "op": "JUMP"
    },
    "415": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1670,
        1746
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "416": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "418": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "419": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1757,
        1766
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "421": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1757,
        1766
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "422": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1780,
        1790
      ],
      "op": "CALLER",
      "path": "0"
    },
    "423": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1780,
        1790
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "424": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1804,
        1825
      ],
      "op": "SELFBALANCE",
      "path": "0"
    },
    "425": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1804,
        1825
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "426": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1757,
        1766
      ],
      "op": "DUP4",
      "path": "0"
    },
    "427": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "DUP2",
      "path": "0"
    },
    "428": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1757,
        1766
      ],
      "op": "DUP2",
      "path": "0"
    },
    "429": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "DUP2",
      "path": "0"
    },
    "430": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1804,
        1825
      ],
      "op": "DUP6",
      "path": "0"
    },
    "431": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1780,
        1790
      ],
      "op": "DUP8",
      "path": "0"
    },
    "432": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "GAS",
      "path": "0"
    },
    "433": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "CALL",
      "path": "0"
    },
    "434": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "435": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "POP",
      "path": "0"
    },
    "436": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "POP",
      "path": "0"
    },
    "437": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "POP",
      "path": "0"
    },
    "438": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "439": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "DUP1",
      "path": "0"
    },
    "440": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "442": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "DUP2",
      "path": "0"
    },
    "443": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "EQ",
      "path": "0"
    },
    "444": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E1"
    },
    "447": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "448": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "450": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "451": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "452": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "POP",
      "path": "0"
    },
    "453": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "455": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "NOT",
      "path": "0"
    },
    "456": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3F"
    },
    "458": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "459": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "ADD",
      "path": "0"
    },
    "460": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "AND",
      "path": "0"
    },
    "461": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "DUP3",
      "path": "0"
    },
    "462": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "ADD",
      "path": "0"
    },
    "463": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "465": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "466": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "467": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "DUP3",
      "path": "0"
    },
    "468": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "469": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "470": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "472": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "474": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "DUP5",
      "path": "0"
    },
    "475": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "ADD",
      "path": "0"
    },
    "476": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "477": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E6"
    },
    "480": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "JUMP",
      "path": "0"
    },
    "481": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "482": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "484": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "485": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "POP",
      "path": "0"
    },
    "486": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1772,
        1830
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "487": {
      "op": "POP"
    },
    "488": {
      "op": "POP"
    },
    "489": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1849,
        1850
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 1,
      "value": "0x0"
    },
    "491": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1840,
        1846
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "493": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1840,
        1850
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "494": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1756,
        1830
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "495": {
      "op": "POP"
    },
    "496": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1756,
        1830
      ],
      "op": "DUP1",
      "path": "0"
    },
    "497": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1933,
        1972
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 2,
      "value": "0x235"
    },
    "500": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1933,
        1972
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "501": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1933,
        1972
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "503": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1933,
        1972
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "504": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "508": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "510": {
      "op": "SHL"
    },
    "511": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1933,
        1972
      ],
      "op": "DUP2",
      "path": "0"
    },
    "512": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1933,
        1972
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "513": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "515": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1933,
        1972
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "517": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1933,
        1972
      ],
      "op": "DUP3",
      "path": "0"
    },
    "518": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1933,
        1972
      ],
      "op": "ADD",
      "path": "0"
    },
    "519": {
      "op": "MSTORE"
    },
    "520": {
      "op": "PUSH1",
      "value": "0x16"
    },
    "522": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "524": {
      "op": "DUP3"
    },
    "525": {
      "op": "ADD"
    },
    "526": {
      "op": "MSTORE"
    },
    "527": {
      "op": "PUSH22",
      "value": "0x2A34329036B7B732BC903BB0B9B713BA1039B2B73A17"
    },
    "550": {
      "op": "PUSH1",
      "value": "0x51"
    },
    "552": {
      "op": "SHL"
    },
    "553": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "555": {
      "op": "DUP3"
    },
    "556": {
      "op": "ADD"
    },
    "557": {
      "op": "MSTORE"
    },
    "558": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "560": {
      "op": "ADD"
    },
    "561": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1933,
        1972
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDA"
    },
    "564": {
      "op": "JUMP"
    },
    "565": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1933,
        1972
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "566": {
      "op": "POP"
    },
    "567": {
      "op": "POP"
    },
    "568": {
      "offset": [
        1304,
        1310
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "570": {
      "offset": [
        1304,
        1318
      ],
      "op": "DUP1",
      "path": "0"
    },
    "571": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1304,
        1318
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "572": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "574": {
      "op": "NOT"
    },
    "575": {
      "offset": [
        1304,
        1318
      ],
      "op": "AND",
      "path": "0"
    },
    "576": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1304,
        1318
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "577": {
      "fn": "EtherWallet.Withdraw",
      "offset": [
        1304,
        1318
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "578": {
      "fn": "EtherWallet.Withdraw",
      "jump": "o",
      "offset": [
        1535,
        1979
      ],
      "op": "JUMP",
      "path": "0"
    },
    "579": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1387,
        1502
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "580": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1445,
        1454
      ],
      "op": "CALLVALUE",
      "path": "0",
      "statement": 3
    },
    "581": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1441
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "583": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1441
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "585": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1454
      ],
      "op": "DUP3",
      "path": "0"
    },
    "586": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1454
      ],
      "op": "DUP3",
      "path": "0"
    },
    "587": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1454
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "588": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1454
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x255"
    },
    "591": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1454
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "592": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1454
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "593": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1454
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x280"
    },
    "596": {
      "fn": "EtherWallet.Deposit",
      "jump": "i",
      "offset": [
        1435,
        1454
      ],
      "op": "JUMP",
      "path": "0"
    },
    "597": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1454
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "598": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1454
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "599": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1454
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "600": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1435,
        1454
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "601": {
      "op": "POP"
    },
    "602": {
      "op": "POP"
    },
    "603": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1471,
        1481
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 4
    },
    "604": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "606": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1482
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "607": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1482
      ],
      "op": "DUP2",
      "path": "0"
    },
    "608": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1482
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "609": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1470
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "611": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "613": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1482
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "614": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1482
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "616": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1482
      ],
      "op": "DUP2",
      "path": "0"
    },
    "617": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1482
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "618": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1495
      ],
      "op": "DUP1",
      "path": "0"
    },
    "619": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1495
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "620": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1486,
        1495
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "621": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1486,
        1495
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "622": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1482
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "623": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1495
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x279"
    },
    "626": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1495
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "627": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1486,
        1495
      ],
      "op": "DUP5",
      "path": "0"
    },
    "628": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1486,
        1495
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "629": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1495
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x280"
    },
    "632": {
      "fn": "EtherWallet.Deposit",
      "jump": "i",
      "offset": [
        1464,
        1495
      ],
      "op": "JUMP",
      "path": "0"
    },
    "633": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1495
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "634": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1495
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "635": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1495
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "636": {
      "fn": "EtherWallet.Deposit",
      "offset": [
        1464,
        1495
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "637": {
      "op": "POP"
    },
    "638": {
      "op": "POP"
    },
    "639": {
      "fn": "EtherWallet.Deposit",
      "jump": "o",
      "offset": [
        1387,
        1502
      ],
      "op": "JUMP",
      "path": "0"
    },
    "640": {
      "op": "JUMPDEST"
    },
    "641": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "643": {
      "op": "DUP3"
    },
    "644": {
      "op": "NOT"
    },
    "645": {
      "op": "DUP3"
    },
    "646": {
      "op": "GT"
    },
    "647": {
      "op": "ISZERO"
    },
    "648": {
      "op": "PUSH2",
      "value": "0x2A1"
    },
    "651": {
      "op": "JUMPI"
    },
    "652": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "657": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "659": {
      "op": "SHL"
    },
    "660": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "662": {
      "op": "MSTORE"
    },
    "663": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "665": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "667": {
      "op": "MSTORE"
    },
    "668": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "670": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "672": {
      "op": "REVERT"
    },
    "673": {
      "op": "JUMPDEST"
    },
    "674": {
      "op": "POP"
    },
    "675": {
      "op": "ADD"
    },
    "676": {
      "op": "SWAP1"
    },
    "677": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "93bb3b98f0ea5f4faf83eb0cc62f6b2238197e7b",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity >0.6.0;\n\n// A solidity program that functions as a crowdsourcing code.\n// Anyone can pay in money into the code, but only the owner can withdraw\n\ncontract EtherWallet\n{\n    // Initialize an address for the owner of the contract\n    address payable owner;\n\n    // Also initialize the amount we have in our contract so as to keep record of the funding\n    uint public amount;\n\n    // setting locked = false for check in reentrance\n    bool locked;\n\n    // I would love to keep accounts of all that have contributed money to this contract\n    // I am going to map each address to a value sent\n    mapping(address => uint) donors;\n\n    // Constructor, makes the deployer the owner of the contract by default.\n    // This should run on a successful deploy\n    constructor()\n    {\n        owner = payable(msg.sender);\n    }\n\n\n    // Declaring two modifiers\n    // 1. One making sure to correct the reentrancyhack\n    // 2. One to make sure that the owner can withdraw\n\n    modifier OnlyOwnerCanWithdraw(address withdrawer)\n    {\n        require(withdrawer == owner, \"Only the owner is allowed to withdraw.\");\n        _;\n    }\n\n    modifier NoReentrance()\n    {\n        require(!locked, \"You cannot redo this action.\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n\n\n    // A function that deposits money into the wallet\n    function Deposit() public payable\n    {\n        amount += msg.value;\n        donors[msg.sender] += msg.value;\n    }\n\n\n    // withdrawa function\n    function Withdraw() public payable OnlyOwnerCanWithdraw(msg.sender) NoReentrance\n    {\n        // check for the total balances\n        require(address(this).balance > 0, \"You have nothing yet on this contract.\");\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        amount = 0;\n        // payable(msg.sender).transfer(address(this).balance);\n        \n        require(sent, \"The money wasn't sent.\");\n    }\n}",
  "sourceMap": "195:1786:0:-:0;;;804:62;;;;;;;;;-1:-1:-1;832:5:0;:27;;-1:-1:-1;;;;;;832:27:0;848:10;832:27;;;195:1786;;;;;;",
  "sourcePath": "contracts/EtherWallet.sol",
  "type": "contract"
}